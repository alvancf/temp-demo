https://github.com/react-native-openharmony/rnoh/commit/388e7963c375120dad8a2f2891c9ea6ef6687502#diff-765fe5ef25a811d770e2fe10dbf8f5a4f440e80f55a593b65bea7fd0046a0092L460


import * as React from 'react';

import {
  View,
  ScrollView,
  StyleSheet,
  ViewStyle,
  Platform,
  Text,
  Dimensions,
  SafeAreaView,
} from 'react-native';
import {I18nManager} from 'react-native';

const {width: screenWidth} = Dimensions.get('window');

export class Carousel extends React.PureComponent<
  React.PropsWithChildren<any>,
  {curIndex: number}
> {
  static defaultProps = {
    loop: false,
    cloneCount: 2,
    mode: 'classic',
    initialIndex: 0,
    vertical: false,
    autoPlay: false,
    autoPlayDelay: 3000,
    scrollEnabled: true,
    showPagination: false,
    onIndexChange: () => {},
  };

  initialized = false;
  autoPlayTimer: NodeJS.Timeout | void;
  autoPlayLoopDelay: NodeJS.Timeout;
  size = {
    width: this.props.width || 1,
    height: this.props.height || 1,
  };
  contentSize?: {
    width: number;
    height: number;
  };
  svRef: InstanceType<typeof ScrollView>;
  state = {
    curIndex: this.props.initialIndex!,
  };

  componentDidMount() {
    this.enableAutoPlay();
  }

  componentWillReceiveProps(nextProps) {
    // 如果curIndex大于下一批数据的数量，需要更新curIndex并滚动至最后一个
    const maxAvailableIndex = React.Children.count(nextProps.children) - 1;
    if (this.state.curIndex > maxAvailableIndex) {
      this.setState({curIndex: maxAvailableIndex});
      this.scrollToIndex({index: maxAvailableIndex, animated: false});
    }
    if (!nextProps.autoPlay && this.autoPlayTimer !== void 0) {
      // 更新的props autoplay 为 false 并且 当前已经存在autoplay的 interval
      this.disableAutoPlay();
    } else if (!!nextProps.autoPlay && this.autoPlayTimer === void 0) {
      // 更新的props autoplay 为 true 并且 当前不存在在运行的autoplay interval
      setTimeout(() => {
        //下一帧开启autoplay
        // 开启 autoplay
        this.enableAutoPlay();
      }, 0);
    }
  }

  componentWillUnmount() {
    this.disableAutoPlay();
  }

  get loop() {
    const {loop, mode} = this.props;
    return loop || mode === 'head-and-tail';
  }

  get totalCount() {
    return React.Children.count(this.props.children);
  }

  enableAutoPlay() {
    if (this.props.autoPlay) {
      clearInterval(this.autoPlayTimer);
      this.autoPlayTimer = setInterval(() => {
        this.scrollToNext();
      }, this.props.autoPlayDelay);
    }
  }

  disableAutoPlay() {
    if (this.props.autoPlay) {
      clearInterval(this.autoPlayTimer);
      clearTimeout(this.autoPlayLoopDelay);
      this.autoPlayTimer = void 0;
    }
  }

  updateIndex(toIndex) {
    const {curIndex} = this.state;
    const {onIndexChange} = this.props;
    toIndex = Helper.clamp(toIndex, 0, this.totalCount - 1);
    if (toIndex !== curIndex) {
      onIndexChange?.(curIndex, toIndex);
      this.setState({curIndex: toIndex});
    }
  }

  scrollToOffset(scroll_params: any) {
    // fix androd rtl
    const fixed_scroll_params = scroll_params;
    const is_rtl = I18nManager.isRTL;
    const is_android_like =
      Platform.OS === 'android' || Platform.OS === 'harmony';
    if (is_android_like && is_rtl && fixed_scroll_params.x != void 0) {
      if (this.contentSize?.width !== void 0) {
        fixed_scroll_params.x =
          this.contentSize?.width - this.size.width - fixed_scroll_params.x;
      }
    }
    this.svRef.scrollTo(fixed_scroll_params);
  }

  scrollToIndex({index, animated = false, loopToStart = false}) {
    const {mode, vertical, cloneCount, snapToInterval} = this.props;

    // 开启循环播放时，由于两边有补充，所以需要对index进行调整
    if (this.loop) {
      index += cloneCount;
    }

    // 首尾模式时，滚动值有一个delta偏移量
    let delta = 0;
    if (mode === 'head-and-tail') {
      delta =
        ((vertical ? this.size.height : this.size.width) -
          (snapToInterval || 0)) /
        2;
    }

    // 垂直/水平模式下，scrollView分别滚动到指定的偏移位置
    if (vertical) {
      const offset = index * (snapToInterval || this.size.height) - delta;
      this.svRef && this.scrollToOffset({y: offset, animated});
    } else {
      const offset = index * (snapToInterval || this.size.width) - delta;
      this.svRef && this.scrollToOffset({x: offset, animated});
    }
    if (loopToStart) {
      const startIndex = cloneCount!;
      const base_size = vertical ? this.size.height : this.size.width;
      const loopStartOffset =
        startIndex * (snapToInterval || base_size) - delta;
      let offsetObject = {};
      if (vertical) {
        offsetObject = {y: loopStartOffset};
      } else {
        offsetObject = {x: loopStartOffset};
      }
      const props_delay_change = this.props.autoPlayDelay || 3000;
      const min_scroll_delay = Math.max(props_delay_change - 200, 400);
      this.autoPlayLoopDelay = setTimeout(() => {
        this.svRef && this.scrollToOffset({...offsetObject, animated: false});
      }, min_scroll_delay);
    }
  }
  scrollToPrev() {
    const {curIndex} = this.state;
    const toIndex = (curIndex - 1 + this.totalCount) % this.totalCount;
    this.updateIndex(toIndex);
    this.scrollToIndex({
      index: this.loop ? curIndex - 1 : toIndex,
      animated: true,
    });
  }

  scrollToNext() {
    const {curIndex} = this.state;
    const toIndex = (curIndex + 1 + this.totalCount) % this.totalCount;
    this.updateIndex(toIndex);
    let loopToStart = false;
    if (this.props.loop && toIndex === 0) {
      loopToStart = true;
    }
    this.scrollToIndex({
      index: this.loop ? curIndex + 1 : toIndex,
      animated: true,
      loopToStart: loopToStart,
    });
  }

  onLayout = evt => {
    this.size = {
      width: Helper.get(evt, 'nativeEvent.layout.width', 1),
      height: Helper.get(evt, 'nativeEvent.layout.height', 1),
    };

    // 后面的操作，只有在组件第一次渲染才执行
    if (this.initialized) {
      return;
    } else {
      this.initialized = true;
    }

    // 初始化的时候，需要滚动至指定的索引值位置
    const {initialIndex} = this.props;
    if (initialIndex != void 0) {
      if (initialIndex < 0 || initialIndex > this.totalCount - 1) {
        console.error(
          "initialIndex should be greater than children's count, or less then 0.",
        );
      } else {
        this.scrollToIndex({index: initialIndex});
      }
    }
  };

  onBeginDrag = () => {
    this.disableAutoPlay();
  };
  onEndDrag = () => {
    this.enableAutoPlay();
  };

  getFixedScrollActiveIndex(index: number) {
    // fix androd rtl
    let toIndex = Helper.clamp(index, 0, this.totalCount - 1);
    const is_rtl = I18nManager.isRTL;
    const is_android_like =
      Platform.OS === 'android' || Platform.OS === 'harmony';
    if (is_android_like && is_rtl) {
      toIndex = this.totalCount - 1 - toIndex;
    }
    return toIndex;
  }
  onScrollEnd = evt => {
    const {mode, vertical, cloneCount, snapToInterval} = this.props;
    // android rtl 情况下 x scroll view 方向 0 -> max
    // ios rtl 情况下 x scroll view 方向 max <- 0
    // x距离不可信，需要 max - (x + this.size.width) 才是真实距离右边值
    // 此处不处理距离，直接使用不可信的 x 计算index,在 this.getFixedScrollActiveIndex 那做序号反转
    const {x, y} = Helper.get(evt, 'nativeEvent.contentOffset', {});
    // 首尾模式时，滚动值有一个delta偏移量
    let delta = 0;
    if (mode === 'head-and-tail') {
      delta =
        ((vertical ? this.size.height : this.size.width) -
          (snapToInterval || 0)) /
        2;
    }

    // 根据当前的滚动值，计算出当前应该的索引值
    let toIndex;
    if (vertical) {
      toIndex = Math.round((y - delta) / (snapToInterval || this.size.height));
    } else {
      toIndex = Math.round((x - delta) / (snapToInterval || this.size.width));
    }

    // 开启循环的时候，prev/next区有clone，因此根据scroll值计算得到的索引值需要调整
    // PS: 另外，当滑到prev/next区时，等滚动结束后需要滚动到中间安全区域所对应的索引值
    if (this.loop) {
      if (toIndex < cloneCount!) {
        toIndex = this.totalCount - cloneCount! + toIndex;
        this.scrollToIndex({index: this.getFixedScrollActiveIndex(toIndex)});
      } else if (toIndex < this.totalCount + cloneCount!) {
        toIndex -= cloneCount!;
      } else {
        toIndex -= this.totalCount + cloneCount!;
        this.scrollToIndex({index: this.getFixedScrollActiveIndex(toIndex)});
      }
    }
    this.updateIndex(this.getFixedScrollActiveIndex(toIndex));
  };

  renderPagination() {
    // showPagination为false || 孩子节点个数不足2个时，不展示
    if (!this.props.showPagination || this.totalCount <= 1) {
      return null;
    }

    // 自定义renderPagination优先级更高
    const {curIndex} = this.state;
    const {renderPagination} = this.props;
    if (typeof renderPagination === 'function') {
      return renderPagination({curIndex, total: this.totalCount});
    }

    const {paginationStyle, dotStyle, curDotStyle} = this.props;
    return (
      <View style={paginationStyle || styles.pagination}>
        {new Array(this.totalCount).fill(1).map((_, idx) => {
          const isCur = idx === curIndex;
          const style = [
            dotStyle || styles.dot,
            isCur && (curDotStyle || styles.curDot),
          ];
          return <View key={idx} style={style} />;
        })}
      </View>
    );
  }

  render() {
    const {
      style,
      mode,
      width,
      height,
      vertical,
      scrollViewStyle,
      scrollEnable,
      ...rest
    } = this.props;
    const pagingEnabled = !this.props.snapToInterval;
    const snapToAlignment = mode === 'head-and-tail' ? 'center' : 'start';
    const render_childrens = Helper.makeChildren(this.props);
    const isAndroidLike =
      Platform.OS === 'android' || Platform.OS === 'harmony';
    let sizeStyle: ViewStyle = {};
    if (width) {
      sizeStyle = {width: width};
    } else if (vertical) {
      sizeStyle = {height: height};
    }
    return (
      <View>
        <View
          collapsable={false}
          style={[style, sizeStyle]}
          onLayout={this.onLayout}>
          <ScrollView
            {...rest}
            // 此属性在android上会导致swiper一次能滚动多个item
            {...(!isAndroidLike && {
              snapToAlignment: snapToAlignment,
            })}
            onContentSizeChange={(width, height) => {
              this.contentSize = {
                width: width,
                height: height,
              };
            }}
            scrollEnabled={scrollEnable}
            ref={_ => (this.svRef = _!)}
            horizontal={!vertical}
            style={scrollViewStyle}
            decelerationRate={'fast'}
            pagingEnabled={pagingEnabled}
            showsVerticalScrollIndicator={false}
            showsHorizontalScrollIndicator={false}
            onScrollBeginDrag={this.onBeginDrag}
            onScrollEndDrag={this.onEndDrag}
            onMomentumScrollEnd={this.onScrollEnd}>
            {render_childrens}
          </ScrollView>
        </View>
        {this.renderPagination()}
      </View>
    );
  }
}
const Helper = {
  get(obj, keyChain, defaultValue) {
    if (
      !obj ||
      !keyChain ||
      !(obj instanceof Object) ||
      typeof keyChain !== 'string'
    ) {
      return defaultValue;
    }

    let tmpValue = obj;
    const keys = keyChain.split('.');
    for (const key of keys) {
      if (typeof tmpValue[key] !== 'undefined') {
        tmpValue = tmpValue[key];
      } else {
        return defaultValue;
      }
    }

    return tmpValue;
  },
  clamp(val, min, max) {
    return min < max
      ? val < min
        ? min
        : val > max
        ? max
        : val
      : val < max
      ? max
      : val > min
      ? min
      : val;
  },
  makeChildren(props) {
    // 非循环播放时，不需要对children进行补充
    const {loop, mode, children, cloneCount} = props;
    if ((!loop && mode !== 'head-and-tail') || !children) {
      return children;
    }

    // children可能是1个或多个，所以用React.Children.toArray处理
    const childrenArray = React.Children.toArray(children);
    const prev = childrenArray.slice(-cloneCount);
    const next = childrenArray.slice(0, cloneCount);
    return prev
      .concat(childrenArray, next)
      .map((item, idx) => React.cloneElement(item as any, {key: idx}));
  },
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  header: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    marginVertical: 20,
  },
  section: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginLeft: 15,
    marginBottom: 10,
  },
  card: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 10,
    margin: 5,
  },
  cardText: {
    fontSize: 24,
    color: '#fff',
    fontWeight: 'bold',
  },
  headTailCarousel: {
    paddingHorizontal: screenWidth * 0.1,
  },
  headTailCard: {
    width: screenWidth * 0.7,
    height: 150,
  },
  pagination: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 10,
  },
  dot: {
    marginHorizontal: 3,
    width: 6,
    height: 6,
    borderRadius: 3,
    backgroundColor: '#E4E4E4',
  },
  curDot: {
    backgroundColor: '#0086F6',
  },
});

// Example card component for the swiper
const Card = ({title, color}: {title: string; color: string}) => (
  <View style={[styles.card, {backgroundColor: color}]}>
    <Text style={styles.cardText}>{title}</Text>
  </View>
);

// Main App component
export default function App() {
  // Example data for the swiper
  const items = [
    {title: 'Slide 1', color: '#FFA07A'},
    {title: 'Slide 2', color: '#98FB98'},
    {title: 'Slide 3', color: '#87CEFA'},
    {title: 'Slide 4', color: '#DDA0DD'},
    {title: 'Slide 5', color: '#F0E68C'},
  ];

  // Handle index change
  const handleIndexChange = (prevIndex: number, currentIndex: number) => {
    console.log(`Moved from slide ${prevIndex} to ${currentIndex}`);
  };

  return (
    <SafeAreaView style={styles.container}>
      <Text style={styles.header}>Swiper Example</Text>

      {/* Basic Carousel */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Basic Carousel</Text>
        <Carousel
          width={screenWidth}
          height={200}
          loop={true}
          autoPlay={true}
          interval={2000}
          autoPlayDelay={2000}
          showPagination={true}
          onIndexChange={handleIndexChange}>
          {items.map((item, index) => (
            <Card key={index} title={item.title} color={item.color} />
          ))}
        </Carousel>
      </View>

      {/* Head and Tail Mode Carousel */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Head and Tail Mode</Text>
        <Carousel
          width={screenWidth * 0.8}
          height={150}
          mode="head-and-tail"
          showPagination={true}
          autoPlay={true}
          interval={2000}
          snapToInterval={screenWidth * 0.7}
          scrollViewStyle={styles.headTailCarousel}>
          {items.map((item, index) => (
            <View key={index} style={styles.headTailCard}>
              <Card title={item.title} color={item.color} />
            </View>
          ))}
        </Carousel>
      </View>
    </SafeAreaView>
  );
}
